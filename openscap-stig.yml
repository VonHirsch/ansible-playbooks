---

- name: install openscap and apply the stig to all hosts
  hosts: all
  become: true

  vars:
    rhel8:
      dir: "rhel8"
      oscap_profile: "xccdf_org.ssgproject.content_profile_stig_gui_customized"
      oscap_policy: "ssg-rhel8-ds"
    rhel9:
      dir: "rhel9"
      oscap_profile: "xccdf_org.ssgproject.content_profile_stig_gui_customized"
      oscap_policy: "ssg-rhel9-ds"

  pre_tasks:

    - debug:
        msg: "Storing content in /reports/oscap."
      run_once: true

    - name: Make staging folders on Ansible server
      file:
        state: directory
        path: "/reports/{{ item }}"
      loop:
        - "oscap"
      run_once: true
      delegate_to: localhost

  tasks:

    - name: only scan hosts that request it
      block:
        - name: Install openscap scanner
          package:
            name: "{{ item }}"
            state: latest
          with_items:
            - openscap-scanner
            - scap-security-guide
    
        - name: configure for RHEL 8
          set_fact:
            dir: "rhel8"
            ssg: "ssg-rhel8-ds.xml"
            oscap_profile: "xccdf_org.ssgproject.content_profile_stig_gui_customized"
          when:
            - ansible_facts['distribution'] == "RedHat"
            - ansible_facts['distribution_major_version'] == "8" 
    
        - name: configure for RHEL 9
          set_fact:
            dir: "rhel9"
            ssg: "ssg-rhel9-ds.xml"
            oscap_profile: "xccdf_org.ssgproject.content_profile_stig_gui_customized"
          when:
            - ansible_facts['distribution'] == "RedHat"
            - ansible_facts['distribution_major_version'] == "9" 
    
        - name: Copy tailoring files
          copy:
            src: "files/{{ dir }}/{{ item }}"
            dest: "~/"
          loop:
            - "{{ ssg }}"
            - "tailoring-xccdf.xml"
    
        - name: Run openscap to evaluate compliance
          ansible.builtin.command:
            cmd: "oscap xccdf eval --fetch-remote-resources --profile {{ oscap_profile }} --results-arf /tmp/oscap-arf.xml --report /tmp/oscap-report.html --tailoring-file ~/tailoring-xccdf.xml ~/{{ ssg }}"
          ignore_errors: true
          register: scap_cmd
    
        - name: Generate Ansible remediation playbook
          ansible.builtin.command:
            cmd: "oscap xccdf generate fix --fix-type ansible --profile {{ oscap_profile }} --tailoring-file ~/tailoring-xccdf.xml --output /tmp/oscap-remediation.yml /tmp/oscap-arf.xml"
          ignore_errors: true
          register: rem_cmd
    
#        - name: Check for failure and escalate unless specified otherwise
#          ansible.builtin.fail:
#            msg: Security scan failed
#          when:
#            - scap_cmd.rc | int != 0

        - name: Fetch configs of interest across the environment, including the reference host
          fetch:
            src: "/tmp/oscap-report.html"
            dest: "/reports/oscap/"

      when: oscap_scan is defined

- name: Copy out reports
  hosts: mgthost

  tasks:

    - name: copy out reports
      copy:
        src: "/reports"
        dest: "/"

    - name: install httpd
      package:
        name: httpd
        state: present

    - name: enable httpd
      systemd:
        name: httpd
        state: started
        enabled: true

    - name: permit traffic in default zone for https service
      ansible.posix.firewalld:
        service: http
        permanent: true
        immediate: true
        state: enabled

    - name: Create a symbolic link
      ansible.builtin.file:
        src: "/reports"
        dest: "/var/www/html/reports"
        state: link

    - name: Allow apache to read files in /reports
      community.general.sefcontext:
        target: '/reports(/.*)?'
        setype: httpd_sys_content_t
        state: present

    - name: Apply new SELinux file context to filesystem
      ansible.builtin.command: restorecon -irv /reports

    - name: Wrapping up
      debug:
        msg: "OpenSCAP reports are under \"http://{{ inventory_hostname }}/reports/oscap\"."


...
