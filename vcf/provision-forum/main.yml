---

- name: Provision AWS-hosted forum instance
  hosts: localhost

  tasks:

    - name: Create a new reserved instance of the type and name specified, in the region specified
      amazon.aws.ec2_instance:
        state: present
        region: "{{ instance_region }}"
        name: "{{ instance_name }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ instance_ami }}"
        key_name: "{{ instance_key_name }}"
        wait: true
        wait_timeout: 500
        security_group: "{{ instance_sg }}"
        tags:
          Name: "{{ instance_name }}"
      register: ec2

    - name: Create db volumes
      amazon.aws.ec2_vol:
        instance: "{{ item.instance_id }}"
        name: db_volume
        volume_size: "{{ instance_db_volume_size }}"
        volume_type: "{{ instance_volume_type }}"
        device_name: "/dev/{{ instance_db_volume_dev }}"
        delete_on_termination: true
        region: "{{ instance_region }}"
      loop: "{{ ec2.instances }}"
      register: ec2_db_vol

    - name: Create www volumes
      amazon.aws.ec2_vol:
        instance: "{{ item.instance_id }}"
        name: www_volume
        volume_size: "{{ instance_www_volume_size }}"
        volume_type: "{{ instance_volume_type }}"
        device_name: "/dev/{{ instance_www_volume_dev }}"
        delete_on_termination: true
        region: "{{ instance_region }}"
      loop: "{{ ec2.instances }}"
      register: ec2_www_vol

    - name: Debug db_vol and www_vol
      ansible.builtin.debug:
        var: "{{ item }}"
      loop:
        - ec2_db_vol
        - ec2_www_vol

    - name: Display created instance info
      ansible.builtin.debug:
        var: ec2

    - name: Get www volume details
      amazon.aws.ec2_vol_info:
        region: "{{ instance_region }}"
        filters:
          "tag:Name": "www_volume"
      register: www_vol_info

    - name: Get db volume details
      amazon.aws.ec2_vol_info:
        region: "{{ instance_region }}"
        filters:
          "tag:Name": "db_volume"
      register: db_vol_info

    - name: Debug db_vol and www_vol details
      ansible.builtin.debug:
        var: "{{ item }}"
      loop:
        - db_vol_info
        - www_vol_info

    - name: Store db volume serial number
      ansible.builtin.set_fact:
        db_volume_id: "{{ db_vol_info.volumes[0].id | replace('-', '') }}"

    - name: Store www volume serial number
      ansible.builtin.set_fact:
        www_volume_id: "{{ www_vol_info.volumes[0].id | replace('-', '') }}"

    - name: Register public IP address to designated xf hostname via route53
      amazon.aws.route53:
        overwrite: true
        command: create
        zone: "{{ xf_dns_zone }}"
        type: A
        ttl: 300
        record: "{{ xf_dns_name }}"
        value: "{{ ec2.instances[0].public_ip_address }}"

    - name: Register public IP address to designated wp hostname via route53
      amazon.aws.route53:
        overwrite: true
        command: create
        zone: "{{ wp_dns_zone }}"
        type: A
        ttl: 300
        record: "{{ wp_dns_name }}"
        value: "{{ ec2.instances[0].public_ip_address }}"


- name: Configure software on AWS-hosted forum instance
  hosts: tag_Name_forum

  vars:
    xf_archives_dir: ~/xf-archives
    xf_staging_dir: ~/xf-staging
    epel_gpg_key: 'https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-9'
    epel_package: 'https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm'
    remi_gpg_keys:
      - 'https://rpms.remirepo.net/RPM-GPG-KEY-remi'
      - 'https://rpms.remirepo.net/RPM-GPG-KEY-remi2025'
      - 'https://rpms.remirepo.net/RPM-GPG-KEY-remi2024'
      - 'https://rpms.remirepo.net/RPM-GPG-KEY-remi2023'
      - 'https://rpms.remirepo.net/RPM-GPG-KEY-remi2022'
      - 'https://rpms.remirepo.net/RPM-GPG-KEY-remi2021'
      - 'https://rpms.remirepo.net/RPM-GPG-KEY-remi2020'
      - 'https://rpms.remirepo.net/RPM-GPG-KEY-remi2019'
      - 'https://rpms.remirepo.net/RPM-GPG-KEY-remi2018'
      - 'https://rpms.remirepo.net/RPM-GPG-KEY-remi2017'
    remi_package: 'https://rpms.remirepo.net/enterprise/remi-release-9.rpm'

    packages:
      - httpd
      - mariadb-backup
      - mariadb-common
      - mariadb-server
      - nvme-cli
      - oniguruma5php
      - php
      - php-cli
      - php-common
      - php-fpm
      - php-gd
      - php-gmp
      - php-intl
      - php-mbstring
      - php-mysqlnd
      - php-opcache
      - php-pdo
      - php-pecl-imagick
      - php-pecl-zip
      - php-soap
      - php-sodium
      - php-xml
      - python3-cryptography
      - unzip
      - zip

  tasks:

    - name: Download repo keys and packages
      ansible.builtin.get_url:
        url: "{{ item }}"
        dest: /tmp
        mode: '0644'
      loop:
        - "{{ epel_package }}"
        - "{{ remi_package }}"

    - name: Install EPEL repo gpg key
      become: true
      ansible.builtin.rpm_key:
        key: "{{ epel_gpg_key }}"
        state: present

    - name: Install EPEL repo package
      become: true
      ansible.builtin.dnf:
        name: "/tmp/{{ epel_package | regex_replace('.*/', '') }}"
        state: present

    - name: Install Remi repo gpg keys
      become: true
      ansible.builtin.rpm_key:
        key: "{{ item }}"
        state: present
      loop: "{{ remi_gpg_keys }}"

    - name: Install Remi repo pacakges
      become: true
      ansible.builtin.dnf:
        name: "/tmp/{{ remi_package | regex_replace('.*/', '') }}"
        state: present

    - name: Install required packages for services
      become: true
      ansible.builtin.package:
        name: "{{ packages }}"
        state: present

    - name: Find db and www device names
      become: true
      ansible.builtin.shell:
        cmd: for dev in `lsblk -o name -d -n | grep -v nvme0n1`; do printf "ln -s /dev/$dev "; sudo nvme id-ctrl -v /dev/${dev} --vendor-specific | grep ^0000 | sed -e 's/.*20 //' -e 's/\"//g' -e 's/\.//g'; done > /root/devlinks.sh
        creates: /root/devlinks.sh

    - name: Run create device links script
      become: true
      ansible.builtin.command:
        cmd: sh /tmp/devlinks.sh
        creates: "/dev/xvd?"

    - name: Format db volume
      become: true
      community.general.filesystem:
        fstype: ext4
        dev: "/dev/{{ instance_db_volume_dev }}"
        force: false

    - name: Format www volume
      become: true
      community.general.filesystem:
        fstype: ext4
        dev: "/dev/{{ instance_www_volume_dev }}"
        force: false

    - name: Mount db volume
      become: true
      ansible.posix.mount:
        path: "{{ instance_db_volume_mp }}"
        src: "/dev/{{ instance_db_volume_dev }}"
        fstype: ext4
        boot: true
        state: mounted

    - name: Mount www volume
      become: true
      ansible.posix.mount:
        path: "{{ instance_www_volume_mp }}"
        src: "/dev/{{ instance_www_volume_dev }}"
        fstype: ext4
        boot: true
        state: mounted

    - name: Set owner of instance_db_volume_mp to mysql:mysql
      become: true
      ansible.builtin.file:
        path: "{{ instance_db_volume_mp }}"
        owner: mysql
        group: mysql
        recurse: false


    - name: Setup certs
      become: true
      block:

        - name: Copy the ACME private key to the server
          ansible.builtin.copy:
            src: "{{ le_private_key }}"
            dest: "{{ priv_cert_dir }}/{{ le_private_key }}"
            owner: root
            group: root
            mode: "0600"

        - name: Copy the certificate private key to the server
          ansible.builtin.copy:
            src: "{{ cert_key }}"
            dest: "{{ priv_cert_dir }}/{{ cert_key }}"
            owner: root
            group: root
            mode: "0600"

        - name: Make sure account exists and has given contacts. We agree to TOS.
          community.crypto.acme_account:
            acme_directory: "{{ le_directory }}"
            acme_version: 2
            account_key_src: "{{ priv_cert_dir }}/{{ le_private_key }}"
            state: present
            terms_agreed: true
            contact:
              - "mailto:{{ le_email }}"

        - name: Generate an OpenSSL Certificate Signing Request with subjectAltName extension
          community.crypto.openssl_csr:
            path: "{{ csr_dir }}/{{ xf_dns_name }}.csr"
            privatekey_path: "{{ priv_cert_dir }}/{{ cert_key }}"
            subject_alt_name: "DNS:{{ xf_dns_name }}"

        - name: Create a challenge for xf using an account key file.
          community.crypto.acme_certificate:
            account_key_src: "{{ priv_cert_dir }}/{{ le_private_key }}"
            modify_account: false
            src: "{{ csr_dir }}/{{ xf_dns_name }}.csr"
            cert: "{{ crt_dir }}/{{ xf_dns_name }}.crt"
            challenge: dns-01
            acme_directory: "{{ le_directory }}"
            acme_version: 2
            # Renew if the certificate is at least 30 days old
            remaining_days: 60
          register: xf_challenge

        - name: Create DNS record for xf dns-01 challenge
          delegate_to: localhost
          become: false
          amazon.aws.route53:
            zone: "{{ xf_dns_zone }}"
            record: "{{ xf_challenge.challenge_data[xf_dns_name]['dns-01'].record }}"
            type: TXT
            ttl: 60
            state: present
            wait: true
            # Note: route53 requires TXT entries to be enclosed in quotes
            value: "{{ xf_challenge.challenge_data[xf_dns_name]['dns-01'].resource_value | community.dns.quote_txt(always_quote=true) }}"
          when: xf_challenge is changed and xf_dns_name in xf_challenge.challenge_data

        - name: Let the challenge be validated and retrieve the cert and intermediate certificate
          community.crypto.acme_certificate:
            account_key_src: "{{ priv_cert_dir }}/{{ le_private_key }}"
            modify_account: false
            src: "{{ csr_dir }}/{{ xf_dns_name }}.csr"
            cert: "{{ crt_dir }}/{{ xf_dns_name }}.crt"
            fullchain: "{{ crt_dir }}/{{ xf_dns_name }}-fullchain.crt"
            chain: "{{ crt_dir }}/{{ xf_dns_name }}-intermediate.crt"
            challenge: dns-01
            acme_directory: "{{ le_directory }}"
            acme_version: 2
            remaining_days: 60
            data: "{{ xf_challenge }}"
          when: xf_challenge is changed

    - name: Setup Xenforo
      become: true
      block:

        - name: Create xf-archives and xf_staging directories
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: '0755'
          loop:
            - "{{ xf_archives_dir }}"
            - "{{ xf_staging_dir }}"

        - name: Copy xf_archive and xf_addons to xf-archives dir
          ansible.builtin.copy:
            src: "{{ item }}"
            dest: "{{ xf_archives_dir }}"
            mode: '0644'
          loop: "{{ xf_addons + [xf_archive] }}"

        - name: Extract Xenforo archive to staging directory
          ansible.builtin.unarchive:
            src: "{{ xf_archives_dir }}/{{ xf_archive }}"
            dest: "{{ xf_staging_dir }}"
            owner: apache
            group: apache
            remote_src: true

        - name: Extract Xenforo addons to staging directory
          ansible.builtin.unarchive:
            src: "{{ xf_archives_dir }}/{{ item }}"
            dest: "{{ xf_staging_dir }}"
            owner: apache
            group: apache
            remote_src: true
          loop: "{{ xf_addons }}"

        - name: Copy content from result.path/upload to xf_home recursively
          ansible.builtin.copy:
            src: '{{ xf_staging_dir }}/upload/'
            dest: "{{ xf_home }}"
            owner: apache
            group: apache
            remote_src: true

        - name: Apply new SELinux file context to filesystem
          ansible.builtin.command: restorecon -irv "{{ xf_home }}"

        - name: Set writable for xf data directories
          ansible.builtin.file:
            path: "{{ xf_home }}/{{ item }}"
            state: directory
            mode: '0777'
          loop:
            - data
            - internal_data

        - name: Set selinux boolean httpd_unified to true
          become: true
          ansible.posix.seboolean:
            name: httpd_unified
            state: true
            persistent: true


...
